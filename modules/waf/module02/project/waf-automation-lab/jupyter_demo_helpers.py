from avi.sdk.avi_api import ApiSession
import datetime
import json
import requests
from pprint import pprint
import urllib.parse

def print_loglines(line):
    if "rule_logs" not in line['waf_log'].keys():
        print("Currently this script only prints log entries generated by Signatures.")
        return
    URI_PATH = line['uri_path']
    RULE_ID = line['waf_log']['rule_logs'][0]['rule_id']
    RULE_NAME = line['waf_log']['rule_logs'][0]['rule_name']
    MATCH_ELEMENT = line['waf_log']['rule_logs'][0]['matches'][0]['match_element']
    MATCH_VALUE = line['waf_log']['rule_logs'][0]['matches'][0]['match_value']
    #print(line['uri_path'])
    #print(line['waf_log']['rule_logs'][0]['rule_id'])
    #print(line['waf_log']['rule_logs'][0]['matches'][0]['match_element'])

    print("Log line details:")
    print("Host: - %s" %line['host'])
    print("Client IP: - %s" %line['client_ip'])
    print("Response Code: - %s" %line['response_code'])
    print("Request_URI: - %s" %URI_PATH)
    print("Significance: - %s" %line['significance'])
    print("WAF Specific Log")
    print("Rule Group: - %s" %line['waf_log']['rule_logs'][0]['rule_group'])
    print("Rule ID: - %s" %RULE_ID)
    print("Rule NAME: - %s" %line['waf_log']['rule_logs'][0]['rule_name'])
    print("Match Element: - %s" %MATCH_ELEMENT)
    print("Block Message: - %s" %line['waf_log']['rule_logs'][0]['msg'])
    print("Attack String: - %s" %MATCH_VALUE)
    return

def print_learned_data(demo_env, api, headers, proxies):
    vs_object = api.get_object_by_name('virtualservice', demo_env['vses']['Hackazon']['vs_name'])
    vs_uuid = vs_object['uuid']
    #print(vs_uuid)
    wafpolicy_object = api.get_object_by_name('wafpolicy', demo_env['vses']['Hackazon']['waf_policy_name'])
    wafpolicy_uuid = wafpolicy_object['uuid']
    #print(wafpolicy_uuid)
    r = requests.get(f'https://{demo_env["controller_ip"]}/api/analytics/learning/virtualservice?app_id={vs_uuid}:{wafpolicy_uuid}&stats=true&confidence=certain', auth=(demo_env["controller_username"], demo_env["controller_password"]), headers=headers, proxies = proxies, verify=False)
    data = r.json()
    if data['resp']:
        print(data['resp'])
    if data['header']:
        print("Current learning meta data:")
        pprint(data['header'])


def print_application_map(demo_env, api, headers, proxies):
    vs_object = api.get_object_by_name('virtualservice', demo_env['vses']['Hackazon']['vs_name'])
    vs_uuid = vs_object['uuid']
    #print(vs_uuid)
    wafpolicy_object = api.get_object_by_name('wafpolicy', demo_env['vses']['Hackazon']['waf_policy_name'])
    wafpolicy_uuid = wafpolicy_object['uuid']
    #print(wafpolicy_uuid)
    #print(f'https://{demo_env["controller_ip"]}/api/analytics/learning/virtualservice?app_id={vs_uuid}:{wafpolicy_uuid}&stats=true&confidence=none')
    r = requests.get(f'https://{demo_env["controller_ip"]}/api/analytics/learning/virtualservice?app_id={vs_uuid}:{wafpolicy_uuid}&stats=true&confidence=none', auth=(demo_env["controller_username"], demo_env["controller_password"]), headers=headers, proxies = proxies, verify=False)
    data = r.json()
    if data['resp']:
        print(data['resp'])
    if data['app_info']:
        #pprint(data)
        for each in data['app_info']['uri']:
            #print(each)
            print(each['name'])
            #pprint(each['params'])
            print('   Params found:', len(each['params']))

def print_auto_promoted_rules(demo_env, api, headers, proxies):
    psmgroup = api.get_object_by_name('wafpolicypsmgroup', demo_env['vses']['Hackazon']['learning_group_name'])
    #pprint(psmgroup)

    for each in psmgroup['locations']:
        print(each['name'])
        for other in each['rules']:
            print('  ', other['match_elements'][0]['sub_element'])
            print('    Pattern:', other['match_value_pattern'])
            print('    Length :', other['match_value_max_length'])

def create_exclusions(api, demo_env, vs, logline, scope):
    if "rule_logs" not in logline['waf_log'].keys():
        print("Currently this script only creates exceptions log entries generated by Signatures.")
        return
    print("------------------------------------")
    print("Creating exclusion")
    if scope == "group":
        GROUP_EXCLUDE = True
        print("execute group exclusion")
    elif scope == "rule":
        GROUP_EXCLUDE = False
        print("execute rule exclusion")
    else:
        print("Please choose group or rule as exclusion scope.")
        return
    
    RULE_ID = logline['waf_log']['rule_logs'][0]['rule_id']

    exclude_list = []
    exclude_list.append({
        'uri_path' : logline['uri_path'],
        'match_element': logline['waf_log']['rule_logs'][0]['matches'][0]['match_element'],
        'uri_match_criteria': {
            'match_case': 'SENSITIVE',
            'match_op': 'EQUALS'
        }
    })

    #pprint.pprint(exclude_list)

    wafpolicy = api.get_object_by_name('wafpolicy', demo_env['vses'][vs]['waf_policy_name'])

    for group in wafpolicy['crs_groups']:
        for rule in group['rules']:
            if str(rule['rule_id']) == str(RULE_ID):
                #pprint.pprint(rule)
                #print('add exclude_list')
                if not GROUP_EXCLUDE:
                    if rule.get('exclude_list'):
                        rule['exclude_list'].append(exclude_list[0])
                    else:
                        rule['exclude_list'] = exclude_list
                    pprint(rule['exclude_list'])
                else:
                    if group.get('exclude_list'):
                        group['exclude_list'].append(exclude_list[0])
                    else:
                        group['exclude_list'] = exclude_list
                    pprint(group['exclude_list'])
            else:
                pass
            #print(rule)
    policy_update = api.put_by_name('wafpolicy', demo_env['vses'][vs]['waf_policy_name'], data=json.dumps(wafpolicy))

def change_policy_mode(api, demo_env, vs, mode):
    wafpolicy_object = api.get_object_by_name('wafpolicy', demo_env['vses'][vs]['waf_policy_name'])
    wafpolicy_object['mode'] = mode
    return api.put_by_name('wafpolicy', demo_env['vses'][vs]['waf_policy_name'], wafpolicy_object)

def enable_learning_group(api, demo_env, vs, mode):
    psmgroup = api.get_object_by_name('wafpolicypsmgroup', demo_env['vses'][vs]['learning_group_name'])
    psmgroup['enable'] = mode
    psmgroup.pop('_last_modified')
    r = api.put_by_name('wafpolicypsmgroup', demo_env['vses'][vs]['learning_group_name'], psmgroup)
    print(f'Learning group enabled: {r.json()["enable"]}')
    return

def print_request_id(r):
    print("Fetching Request-ID")
    import re
    if r.status_code <= 300:
        # trying to extract the request_id from the header
        if r.headers.get("X-Request-Id", None):
            #print(r.headers["X-Request-Id"])
            return r.headers["X-Request-Id"]
        else:
            print("No Request-ID Header found. Trying response text.")
    regex = r"Request ID:\s([0-9a-zA-Z-]+)\s"
    r_id_rx = re.compile(regex, re.MULTILINE | re.IGNORECASE)
    p = r_id_rx.search(r.text)
    if p:
        print("Request-ID of the request:", p.group(1))
        request_id = p.group(1)
        return request_id
    else:
        print("Request-ID not found")
        return "Not found"

def send_get(url, headers, proxies):
    #TODO Split on ? and only quote that part.
    #print(urllib.parse.quote(url))
    print(url)
    r = requests.get(url, headers = headers, proxies = proxies, verify=False)
    print("Request status code:", r.status_code)
    request_id = print_request_id(r)
    return request_id

def send_post(url, payload, headers, proxies):
    #TODO Split on ? and only quote that part.
    #print(urllib.parse.quote(url))
    print(url)
    r = requests.post(url, headers = headers, proxies = proxies, params = payload, verify=False)
    print("Request status code:", r.status_code)
    request_id = print_request_id(r)
    return request_id

def print_log_entry(api, demo_env, vs, request_id):
    vs_object = api.get_object_by_name('virtualservice', demo_env['vses'][vs]['vs_name'])
    now = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
    #request_id used from previous command

    #Looping retrieval, because this can take a couple seconds for the log to appear on Controller
    response = api.get(f'analytics/logs?type=1&virtualservice={vs_object["uuid"]}&udf=true&nf=true&filter=eq(request_id,"{request_id}")&timeout=2&orderby=-report_timestamp&page_size=20&page=1&end={now}&duration=86400&js_compat=true&')
    if response.json()['count'] == 0:
        print("Logline not available at Controller yet. Please re-run.")
    else:
        logs = response.json()
        print("\nLog query result: %s entries found\n" %(len(logs['results'])))
        for line in logs['results']:
            print_loglines(line)
        return logs

def check_setup(demo_env):
    api = ApiSession.get_session(
    controller_ip=demo_env['controller_ip'],
    username=demo_env['controller_username'],
    password=demo_env['controller_password'],
    tenant=demo_env['tenant'],
    api_version=demo_env['api_version']
    )
    print('Successful. Session ID:' + api.session_id)
    
    return api
